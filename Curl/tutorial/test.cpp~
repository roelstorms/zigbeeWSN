
#include <stdio.h>
#include <curl/curl.h>
#include <string>
#include <iostream>
#include <fstream>


size_t write_data(void *buffer, size_t size, size_t nmemb, void *userp)
{
	std::ofstream myfile;
  	myfile.open ("log.txt");

	myfile << std::string((char *)buffer);
	return size * nmemb;
} 

int main(void)
{
  CURL *curl;
  CURLcode res;

  curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, "http://example.com");
    /* example.com is redirected, so we tell libcurl to follow redirection */
    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
	curl_easy_setopt(curl, CURLOPT_HEADER, 1);
	curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
 	curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data); 
	//curl_easy_setopt(curl, CURLOPT_WRITEDATA, &internal_struct); 
    /* Perform the request, res will get the return code */
    res = curl_easy_perform(curl);
    /* Check for errors */
    if(res != CURLE_OK)
      fprintf(stderr, "curl_easy_perform() failed: %s\n",
              curl_easy_strerror(res));

    /* always cleanup */
    curl_easy_cleanup(curl);
  }
  return 0;
}

