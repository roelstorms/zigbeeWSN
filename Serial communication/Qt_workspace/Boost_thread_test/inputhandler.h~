#ifndef INPUTHANLDER_H
#define INPUTHANLDER_H

#include <string>
#include <iostream>
#include <boost/thread.hpp>

class InputHandler
{
	private:
	int fileDescriptor;	
	int m_iterations;
	public:
	InputHandler(int nrOfIterations);
	~InputHandler();

	// Copy constructor
	InputHandler(const InputHandler& source)
	{
	m_iterations=source.m_iterations;
	}
	 
	
	// Assignment operator
	InputHandler& operator = (const InputHandler& source)
	{
	m_iterations=source.m_iterations;
	return *this;
	}


	static void StaticFunction()
	{
	for (int i=0; i < 10; i++)  // Hard-coded upper limit
		{
		std::cout<<i<<"Do something in parallel (Static function)."<< std::endl;
		boost::this_thread::yield(); // 'yield' discussed in section 18.6
		}
	}
	void operator () ()
	{
		for (int i=0; i<m_iterations; i++)
		{
			std::cout<<i<<" - Do something in parallel (operator() )."<< std::endl;
			boost::this_thread::yield(); // 'yield' discussed in section 18.6
		}
	}

};

#endif
