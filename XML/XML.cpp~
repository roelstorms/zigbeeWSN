#include "XML.h"
XML::XML()
{
	try {
	 	xercesc::XMLPlatformUtils::Initialize();
	 }
	 catch (const xercesc::XMLException& toCatch) {
	 	// Do your failure processing here
	 }
}

XML::~XML()
{
	xercesc::XMLPlatformUtils::Terminate();
}


int XML::serializeDOM(xercesc::DOMNode* node) {

        XMLCh tempStr[100];
        xercesc::XMLString::transcode("LS", tempStr, 99);
        xercesc::DOMImplementation *impl = xercesc::DOMImplementationRegistry::getDOMImplementation(tempStr);
        xercesc::DOMLSSerializer* theSerializer = ((xercesc::DOMImplementationLS*)impl)->createLSSerializer();

        // optionally you can set some features on this serializer
        if (theSerializer->getDomConfig()->canSetParameter(xercesc::XMLUni::fgDOMWRTDiscardDefaultContent, true))
            theSerializer->getDomConfig()->setParameter(xercesc::XMLUni::fgDOMWRTDiscardDefaultContent, true);

        if (theSerializer->getDomConfig()->canSetParameter(xercesc::XMLUni::fgDOMWRTFormatPrettyPrint, true))
             theSerializer->getDomConfig()->setParameter(xercesc::XMLUni::fgDOMWRTFormatPrettyPrint, true);

        // optionally you can implement your DOMLSSerializerFilter (e.g. MyDOMLSSerializerFilter)
        // and set it to the serializer
        //DOMLSSerializerFilter* myFilter = new myDOMLSSerializerFilter();
        //theSerializer->setFilter(myFilter);

        // optionally you can implement your DOMErrorHandler (e.g. MyDOMErrorHandler)
        // and set it to the serializer
        //DOMErrorHandler* myErrorHandler() = new myDOMErrorHandler();
        //theSerializer->getDomConfig()->setParameter(XMLUni::fgDOMErrorHandler, myErrorHandler);

        // StdOutFormatTarget prints the resultant XML stream
        // to stdout once it receives any thing from the serializer.

	xercesc::XMLFormatTarget *myFormTarget = new xercesc::StdOutFormatTarget();
        xercesc::DOMLSOutput* theOutput = ((xercesc::DOMImplementationLS*)impl)->createLSOutput();
        theOutput->setByteStream(myFormTarget);
	theSerializer->writeToString(node);
        try {
            // do the serialization through DOMLSSerializer::write();
            theSerializer->write(node, theOutput);
        }
        catch (const xercesc::XMLException& toCatch) {
            char* message = xercesc::XMLString::transcode(toCatch.getMessage());
            std::cout << "Exception message is: \n"
                 << message << "\n";
            xercesc::XMLString::release(&message);
            return -1;
        }
        catch (const xercesc::DOMException& toCatch) {
            char* message = xercesc::XMLString::transcode(toCatch.msg);
            std::cout << "Exception message is: \n"
                 << message << "\n";
            xercesc::XMLString::release(&message);
            return -1;
        }
        catch (...) {
            std::cout << "Unexpected Exception \n" ;
            return -1;
        }

        theOutput->release();
        theSerializer->release();
        return 0;
    }

int XML::uploadData(std::string type, std::vector<std::pair<std::string, double>> input)	// need to accept multiple arguments (pairs of field names and values)
{

	XMLCh tempStr[100];
        std::cout << "begin of upload" << std::endl;
        xercesc::XMLString::transcode("impl", tempStr, 99);
        xercesc::DOMImplementation* impl = xercesc::DOMImplementationRegistry::getDOMImplementation(tempStr);

        xercesc::XMLString::transcode("doc", tempStr, 99);
        xercesc::DOMDocument* doc = impl->createDocument(0, tempStr, 0);
        xercesc::DOMElement* docElement = doc->getDocumentElement();
std::cout << "end of upload" << std::endl;
        xercesc::XMLString::transcode("upload", tempStr, 99);
        xercesc::DOMElement* upload = doc->createElement(tempStr);
        docElement->appendChild(upload);


        xercesc::XMLString::transcode("items", tempStr, 99);
        xercesc::DOMElement* items = doc->createElement(tempStr);
        upload->appendChild(items);

	xercesc::XMLString::transcode(type.c_str(), tempStr, 99);
	xercesc::DOMElement* myType = doc->createElement(tempStr);
	items->appendChild(myType);
	
	for(auto it = input.begin(); it < input.end(); ++it)
	{		
		
		xercesc::XMLString::transcode((*it).first.c_str(), tempStr, 99);
		xercesc::DOMNode* field = doc->createElement(tempStr);
		//field1->setNodeValue(XMLString::transcode("test"));//, XMLString::transcode("0.12"));
		myType->appendChild(field);

		std::ostringstream stream;		// Can use boost to convert double to string more elegantly
		stream << (*it).second;
		std::string fieldValue = stream.str();
		
		xercesc::XMLString::transcode(fieldValue.c_str(), tempStr, 99);
		xercesc::DOMText* fieldvalue = doc->createTextNode(tempStr);
		//field1->setNodeValue(field1value);//, XMLString::transcode("0.12"));
		field->appendChild(fieldvalue);
	}

        


     	xercesc::XMLString::transcode("utimestamp", tempStr, 99);
        xercesc::DOMElement* utimestamp = doc->createElement(tempStr);
        myType->appendChild(utimestamp);  

	xercesc::XMLString::transcode("0", tempStr, 99);
        xercesc::DOMText* timestampValue = doc->createTextNode(tempStr);
	utimestamp->appendChild(timestampValue);
        std::cout << "end of upload" << std::endl;
	
	serializeDOM(upload);
  	// Other terminations and cleanup.
}

int XML::createNewType(std::string name)
{

	return 0;
}

int XML::createNewUser()
{

	return 0;
}

int XML::login(std::string username, std::string password)
{

	XMLCh tempStr[100];

        xercesc::XMLString::transcode("impl", tempStr, 99);
        xercesc::DOMImplementation* impl = xercesc::DOMImplementationRegistry::getDOMImplementation(tempStr);

        xercesc::XMLString::transcode("doc", tempStr, 99);
        xercesc::DOMDocument* doc = impl->createDocument(0, tempStr, 0);
        xercesc::DOMElement* docElement = doc->getDocumentElement();

        xercesc::XMLString::transcode("UserLogin", tempStr, 99);
        xercesc::DOMElement* userLoginNode = doc->createElement(tempStr);
        docElement->appendChild(userLoginNode);

        xercesc::XMLString::transcode("password", tempStr, 99);
        xercesc::DOMElement* passwordNode = doc->createElement(tempStr);
        userLoginNode->appendChild(passwordNode);

	xercesc::XMLString::transcode(password.c_str(), tempStr, 99);
	xercesc::DOMText* passwordValue = doc->createTextNode(tempStr);
	passwordNode->appendChild(passwordValue);

        xercesc::XMLString::transcode("username", tempStr, 99);
        xercesc::DOMElement* usernameNode = doc->createElement(tempStr);
	userLoginNode->appendChild(usernameNode);

	xercesc::XMLString::transcode(username.c_str(), tempStr, 99);
	xercesc::DOMText* usernameValue = doc->createTextNode(tempStr);
	usernameNode->appendChild(usernameValue);
	
	serializeDOM(userLoginNode);

	return 0;
}


